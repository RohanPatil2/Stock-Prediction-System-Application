.\" Manpage for qr
.TH QR 1 "6 Feb 2023" "7.4.2" "Python QR tool"
.SH NAME
qr \- Advanced command-line QR code generator with multiple output formats
.SH SYNOPSIS
.B qr
[\fIOPTIONS\fR]
[\fIdata\fR]
.br
.SH DESCRIPTION
The \fBqr\fR utility generates QR codes from command-line input or stdin, offering flexible output options including terminal ASCII art and various image formats. Built on the python-qrcode module, it supports advanced features like error correction optimization and multiple output formats.

When no output file is specified and stdout is a terminal, qr displays the QR code as ASCII art. When redirected to a file or piped to another command, it generates image data (default PNG format).

.SH OPTIONS
.TP
\fB\-h\fR, \fB\-\-help\fR
Show detailed help message and exit
.TP
\fB\-\-factory=\fIFACTORY\fR
Specify output format using image factory class. Available shortcuts:
.RS
.IP \(bu 3
\fBpil\fR: PNG via Pillow (default if Pillow installed)
.IP \(bu 3
\fBpng\fR: Basic PNG (fallback without Pillow)
.IP \(bu 3
\fBsvg\fR: SVG full document
.IP \(bu 3
\fBsvg-fragment\fR: SVG fragment
.IP \(bu 3
\fBsvg-path\fR: SVG path only
.IP \(bu 3
Custom module path for advanced formats
.RE
.TP
\fB\-\-optimize=\fIOPTIMIZE\fR
Data optimization level (0-127). Higher values enable more aggressive compression:
.RS
.IP \(bu 3
\fB0\fR: No optimization
.IP \(bu 3
\fB5\fR: Default balance
.IP \(bu 3
\fB15\fR: Maximum optimization
.RE
.TP
\fB\-\-error\-correction=\fILEVEL\fR
Set error correction level:
.RS
.IP \(bu 3
\fBL\fR: Low (7% recovery)
.IP \(bu 3
\fBM\fR: Medium (15% recovery, default)
.IP \(bu 3
\fBQ\fR: Quartile (25% recovery)
.IP \(bu 3
\fBH\fR: High (30% recovery)
.RE
.TP
\fB\-\-version\fR
Show program version and exit
.TP
\fB\-\-output=\fIFILE\fR
Write image to specified file (format determined by extension)
.TP
\fB\-\-foreground=\fICOLOR\fR
Set foreground color (hex #RRGGBB or name)
.TP
\fB\-\-background=\fICOLOR\fR
Set background color (hex #RRGGBB or name)
.TP
\fB\-\-size=\fISIZE\fR
Set module size in pixels (default: 10)
.TP
\fB\-\-border=\fISIZE\fR
Set border width in modules (default: 4)
.TP
\fB\-\-encoding=\fIENCODING\fR
Force specific encoding mode:
.RS
.IP \(bu 3
numeric
.IP \(bu 3
alphanumeric
.IP \(bu 3
byte
.IP \(bu 3
kanji
.RE

.SH EXAMPLES
Generate WiFi QR code:
.nf
.B qr "WIFI:S:MySSID;T:WPA;P:MyPassword;;"
.fi

Create SVG QR code with high error correction:
.nf
.B qr \-\-factory=svg \-\-error-correction=H "https://example.com" > qr.svg
.fi

Generate optimized PNG for large data:
.nf
.B cat data.txt | qr \-\-optimize=20 \-\-output=data.png
.fi

.SH ENVIRONMENT
.IP QR_DEFAULT_FACTORY 15
Set default image factory
.IP QR_COLORS 15
Override terminal colors (format: foreground,background)

.SH FILES
.IP /usr/share/qr/styles/
Default style templates directory
.IP ~/.qrconfig
Per-user configuration file

.SH EXIT STATUS
.IP 0
Success
.IP 1
Invalid arguments
.IP 2
Input/output error
.IP 3
Missing dependencies

.SH NOTES
Requires python-qrcode and (for PNG support) Pillow library. SVG output requires libxml2.

.SH BUGS
Report issues at https://github.com/lincolnloop/python-qrcode/issues

.SH AUTHORS
Lincoln Loop <info@lincolnloop.com>
.SH SEE ALSO
qrencode(1), zbarimg(1), https://github.com/lincolnloop/python-qrcode/
